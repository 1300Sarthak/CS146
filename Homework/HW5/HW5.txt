Problem #1:
For each of the following recurrences, verify the answer you get by applying the master method, by 
solving the recurrence algebraically OR applying the recursion tree method. 

1. T(N) = 2T(N-1) + 1
Using the substitution method we can get the answer for example, T(N-1) = 2T(N-2) + 1, T(N-2) = 2T(N-3) + 1,
and so on and so forth Until we reach T(1), in which we assume to be some base case T(1)=c, where c is a constant.
After that, we may change T(N-1) to match the original equation. Getting us with T(N) = 2T(2T(N-2)+1)+1. If we then
substituted T(N-2), T(N) = 2T(2T(2T(N-3)+1)+1)+1. By carrying out k such operations, this equation will start to 
resemble T(N) = 2^k T(N-k) + k. To remove the k, let's say k = n, then we will get, T(N) = 2^n T(0) + N, and T(N) 
is a constant. Finally, we can state the time complexity being theta(2^n).

2. T(N) = 3T(N-1) + n
Since T(N) = 3T(N-1) + n isn't in the form of T(N) = aT(N/b) + f(N), we cannot solve it using the master theorem and
have to instead use the recursion tree method. When we expand each term, by doing so we can see that each term generates
three times the work of the last term plus a linear term on top of that. Time complexity of theta(3^n)

3. T(N) = 9T(N/2) + n^2
We can use the Master Theorem with a=9, b=2, and f(N)=N^2. Since f(N) is smaller than N to the power of log base 2 of 9, 
the theorem shows that T(N) is Theta(N to the power of log base 2 of 9). Therefore, the solution to the recurrence is T(N) 
= Theta(N^3.17)

4. T(N) = 100T(N/2) + n^(log2cn + 1)  (c is a constant)
This one should be done using the recursion tree method, and fully assumign that c is a constant we can solve by looking at 
each level indivually at the first level we get 100 T(N/2) + n^(log_2(n)) with level 2 we get ___ from this we will expand, and

5. T(N) = 4T(N/2) + n^(2)logn
Using the Master Theorem we can get that the function given is of the form theta(n^log_b(a)log^k(n)) with a = 4, b = 2, and k = 1, 
since log base 2 of 4 is 2. This leads us to a solution of theta(n^2log^k+1(n)), which simplifies to theta(N^2logN). Giving our final answer.

6. T(N) = 5T(N/2) + n^(2)/logn
By expanding the tree we can get our answer, we determine that the cost at each level is 5^K ((N/2^i)^2 / log(N/2^i)). 
We then use the master theorem to test this, and the result is that the time complexity is Theta(N^(log_2(5))).








Problem #2:
Below is some pseudocode. Come up with a recurrence relation, and solve that recurrence relation 
using any method of your choice.  

yetAnotherFunc(n): 
  if n > 1: 
    for(i=0;i<10n;i++)
      doSomething;
    yetAnotherFunc(n/2);
    yetAnotherFunc(n/2);

Hint: This code is slightly different from the pseudocode we've seen before. Think carefully about 
which method will help you come up with a good recurrence relation to solve. 

This recurrence relation for this puescode function be use with the formula T(N) = 2T(N/2) + 10N
where a=2,b=2, and f(n)=10n, (is in theta(n)). From this we can use the 2nd case of Master's Theorm 
f(n) = Θ(n ^ (logb(a)-e) log^k) in which k >= 0 then T(n) = Θ(n^(logb(a)) log^(k+1)n). From this we get 
time complexity of theta(NlogN) from the code given to us.

